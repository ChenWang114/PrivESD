// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_requests.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_requests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Test_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Test_Request_Request_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_5frequests_2eproto() {
  protobuf_AddDesc_test_5frequests_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test_requests.proto");
  GOOGLE_CHECK(file != NULL);
  Test_Request_descriptor_ = file->message_type(0);
  static const int Test_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, bit_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, comparison_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, argmax_elements_),
  };
  Test_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_Request_descriptor_,
      Test_Request::default_instance_,
      Test_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test_Request));
  Test_Request_Request_Type_descriptor_ = Test_Request_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_5frequests_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_Request_descriptor_, &Test_Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_5frequests_2eproto() {
  delete Test_Request::default_instance_;
  delete Test_Request_reflection_;
}

void protobuf_AddDesc_test_5frequests_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023test_requests.proto\"\240\003\n\014Test_Request\022("
    "\n\004type\030\001 \002(\0162\032.Test_Request.Request_Type"
    "\022\020\n\010bit_size\030\002 \001(\r\022\022\n\niterations\030\003 \001(\r\022\033"
    "\n\023comparison_protocol\030\004 \001(\r\022\027\n\017argmax_el"
    "ements\030\005 \001(\r\"\211\002\n\014Request_Type\022\r\n\tTEST_LS"
    "IC\020\000\022\020\n\014TEST_COMPARE\020\001\022\030\n\024TEST_GARBLED_C"
    "OMPARE\020\002\022\024\n\020TEST_ENC_COMPARE\020\003\022\030\n\024TEST_R"
    "EV_ENC_COMPARE\020\004\022\032\n\026TEST_LINEAR_ENC_ARGM"
    "AX\020\005\022\014\n\010TEST_FHE\020\006\022\022\n\016TEST_CHANGE_ES\020\007\022\031"
    "\n\025TEST_MULTIPLE_COMPARE\020\010\022\030\n\024TEST_TREE_E"
    "NC_ARGMAX\020\t\022\013\n\007TEST_OT\020\n\022\016\n\nDISCONNECT\020\017", 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_requests.proto", &protobuf_RegisterTypes);
  Test_Request::default_instance_ = new Test_Request();
  Test_Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_5frequests_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_5frequests_2eproto {
  StaticDescriptorInitializer_test_5frequests_2eproto() {
    protobuf_AddDesc_test_5frequests_2eproto();
  }
} static_descriptor_initializer_test_5frequests_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Test_Request_Request_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_Request_Request_Type_descriptor_;
}
bool Test_Request_Request_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Test_Request_Request_Type Test_Request::TEST_LSIC;
const Test_Request_Request_Type Test_Request::TEST_COMPARE;
const Test_Request_Request_Type Test_Request::TEST_GARBLED_COMPARE;
const Test_Request_Request_Type Test_Request::TEST_ENC_COMPARE;
const Test_Request_Request_Type Test_Request::TEST_REV_ENC_COMPARE;
const Test_Request_Request_Type Test_Request::TEST_LINEAR_ENC_ARGMAX;
const Test_Request_Request_Type Test_Request::TEST_FHE;
const Test_Request_Request_Type Test_Request::TEST_CHANGE_ES;
const Test_Request_Request_Type Test_Request::TEST_MULTIPLE_COMPARE;
const Test_Request_Request_Type Test_Request::TEST_TREE_ENC_ARGMAX;
const Test_Request_Request_Type Test_Request::TEST_OT;
const Test_Request_Request_Type Test_Request::DISCONNECT;
const Test_Request_Request_Type Test_Request::Request_Type_MIN;
const Test_Request_Request_Type Test_Request::Request_Type_MAX;
const int Test_Request::Request_Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Test_Request::kTypeFieldNumber;
const int Test_Request::kBitSizeFieldNumber;
const int Test_Request::kIterationsFieldNumber;
const int Test_Request::kComparisonProtocolFieldNumber;
const int Test_Request::kArgmaxElementsFieldNumber;
#endif  // !_MSC_VER

Test_Request::Test_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Test_Request)
}

void Test_Request::InitAsDefaultInstance() {
}

Test_Request::Test_Request(const Test_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Test_Request)
}

void Test_Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  bit_size_ = 0u;
  iterations_ = 0u;
  comparison_protocol_ = 0u;
  argmax_elements_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test_Request::~Test_Request() {
  // @@protoc_insertion_point(destructor:Test_Request)
  SharedDtor();
}

void Test_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Test_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_Request_descriptor_;
}

const Test_Request& Test_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5frequests_2eproto();
  return *default_instance_;
}

Test_Request* Test_Request::default_instance_ = NULL;

Test_Request* Test_Request::New() const {
  return new Test_Request;
}

void Test_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Test_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, argmax_elements_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Test_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Test_Request.Request_Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Test_Request_Request_Type_IsValid(value)) {
            set_type(static_cast< ::Test_Request_Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bit_size;
        break;
      }

      // optional uint32 bit_size = 2;
      case 2: {
        if (tag == 16) {
         parse_bit_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_size_)));
          set_has_bit_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iterations;
        break;
      }

      // optional uint32 iterations = 3;
      case 3: {
        if (tag == 24) {
         parse_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iterations_)));
          set_has_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_comparison_protocol;
        break;
      }

      // optional uint32 comparison_protocol = 4;
      case 4: {
        if (tag == 32) {
         parse_comparison_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comparison_protocol_)));
          set_has_comparison_protocol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_argmax_elements;
        break;
      }

      // optional uint32 argmax_elements = 5;
      case 5: {
        if (tag == 40) {
         parse_argmax_elements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &argmax_elements_)));
          set_has_argmax_elements();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Test_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Test_Request)
  return false;
#undef DO_
}

void Test_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Test_Request)
  // required .Test_Request.Request_Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 bit_size = 2;
  if (has_bit_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bit_size(), output);
  }

  // optional uint32 iterations = 3;
  if (has_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iterations(), output);
  }

  // optional uint32 comparison_protocol = 4;
  if (has_comparison_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->comparison_protocol(), output);
  }

  // optional uint32 argmax_elements = 5;
  if (has_argmax_elements()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->argmax_elements(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Test_Request)
}

::google::protobuf::uint8* Test_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test_Request)
  // required .Test_Request.Request_Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 bit_size = 2;
  if (has_bit_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bit_size(), target);
  }

  // optional uint32 iterations = 3;
  if (has_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iterations(), target);
  }

  // optional uint32 comparison_protocol = 4;
  if (has_comparison_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->comparison_protocol(), target);
  }

  // optional uint32 argmax_elements = 5;
  if (has_argmax_elements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->argmax_elements(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test_Request)
  return target;
}

int Test_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Test_Request.Request_Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 bit_size = 2;
    if (has_bit_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_size());
    }

    // optional uint32 iterations = 3;
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iterations());
    }

    // optional uint32 comparison_protocol = 4;
    if (has_comparison_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comparison_protocol());
    }

    // optional uint32 argmax_elements = 5;
    if (has_argmax_elements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->argmax_elements());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test_Request::MergeFrom(const Test_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bit_size()) {
      set_bit_size(from.bit_size());
    }
    if (from.has_iterations()) {
      set_iterations(from.iterations());
    }
    if (from.has_comparison_protocol()) {
      set_comparison_protocol(from.comparison_protocol());
    }
    if (from.has_argmax_elements()) {
      set_argmax_elements(from.argmax_elements());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test_Request::CopyFrom(const Test_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Test_Request::Swap(Test_Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bit_size_, other->bit_size_);
    std::swap(iterations_, other->iterations_);
    std::swap(comparison_protocol_, other->comparison_protocol_);
    std::swap(argmax_elements_, other->argmax_elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_Request_descriptor_;
  metadata.reflection = Test_Request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
