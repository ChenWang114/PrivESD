// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keys.proto

#ifndef PROTOBUF_keys_2eproto__INCLUDED
#define PROTOBUF_keys_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bigint.pb.h"
// @@protoc_insertion_point(includes)

namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_keys_2eproto();
void protobuf_AssignDesc_keys_2eproto();
void protobuf_ShutdownFile_keys_2eproto();

class Paillier_PK;
class GM_PK;
class PK_Status;

enum PK_Status_Key_Type {
  PK_Status_Key_Type_GM = 0,
  PK_Status_Key_Type_PAILLIER = 1
};
bool PK_Status_Key_Type_IsValid(int value);
const PK_Status_Key_Type PK_Status_Key_Type_Key_Type_MIN = PK_Status_Key_Type_GM;
const PK_Status_Key_Type PK_Status_Key_Type_Key_Type_MAX = PK_Status_Key_Type_PAILLIER;
const int PK_Status_Key_Type_Key_Type_ARRAYSIZE = PK_Status_Key_Type_Key_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PK_Status_Key_Type_descriptor();
inline const ::std::string& PK_Status_Key_Type_Name(PK_Status_Key_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PK_Status_Key_Type_descriptor(), value);
}
inline bool PK_Status_Key_Type_Parse(
    const ::std::string& name, PK_Status_Key_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PK_Status_Key_Type>(
    PK_Status_Key_Type_descriptor(), name, value);
}
enum PK_Status_Key_Status {
  PK_Status_Key_Status_NEED_PK = 0,
  PK_Status_Key_Status_NO_NEED_PK = 1,
  PK_Status_Key_Status_HAS_PK = 2
};
bool PK_Status_Key_Status_IsValid(int value);
const PK_Status_Key_Status PK_Status_Key_Status_Key_Status_MIN = PK_Status_Key_Status_NEED_PK;
const PK_Status_Key_Status PK_Status_Key_Status_Key_Status_MAX = PK_Status_Key_Status_HAS_PK;
const int PK_Status_Key_Status_Key_Status_ARRAYSIZE = PK_Status_Key_Status_Key_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* PK_Status_Key_Status_descriptor();
inline const ::std::string& PK_Status_Key_Status_Name(PK_Status_Key_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    PK_Status_Key_Status_descriptor(), value);
}
inline bool PK_Status_Key_Status_Parse(
    const ::std::string& name, PK_Status_Key_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PK_Status_Key_Status>(
    PK_Status_Key_Status_descriptor(), name, value);
}
// ===================================================================

class Paillier_PK : public ::google::protobuf::Message {
 public:
  Paillier_PK();
  virtual ~Paillier_PK();

  Paillier_PK(const Paillier_PK& from);

  inline Paillier_PK& operator=(const Paillier_PK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Paillier_PK& default_instance();

  void Swap(Paillier_PK* other);

  // implements Message ----------------------------------------------

  Paillier_PK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Paillier_PK& from);
  void MergeFrom(const Paillier_PK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Protobuf.BigInt N = 1;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 1;
  inline const ::Protobuf::BigInt& n() const;
  inline ::Protobuf::BigInt* mutable_n();
  inline ::Protobuf::BigInt* release_n();
  inline void set_allocated_n(::Protobuf::BigInt* n);

  // required .Protobuf.BigInt g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline const ::Protobuf::BigInt& g() const;
  inline ::Protobuf::BigInt* mutable_g();
  inline ::Protobuf::BigInt* release_g();
  inline void set_allocated_g(::Protobuf::BigInt* g);

  // @@protoc_insertion_point(class_scope:Protobuf.Paillier_PK)
 private:
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_g();
  inline void clear_has_g();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Protobuf::BigInt* n_;
  ::Protobuf::BigInt* g_;
  friend void  protobuf_AddDesc_keys_2eproto();
  friend void protobuf_AssignDesc_keys_2eproto();
  friend void protobuf_ShutdownFile_keys_2eproto();

  void InitAsDefaultInstance();
  static Paillier_PK* default_instance_;
};
// -------------------------------------------------------------------

class GM_PK : public ::google::protobuf::Message {
 public:
  GM_PK();
  virtual ~GM_PK();

  GM_PK(const GM_PK& from);

  inline GM_PK& operator=(const GM_PK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_PK& default_instance();

  void Swap(GM_PK* other);

  // implements Message ----------------------------------------------

  GM_PK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_PK& from);
  void MergeFrom(const GM_PK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Protobuf.BigInt N = 1;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 1;
  inline const ::Protobuf::BigInt& n() const;
  inline ::Protobuf::BigInt* mutable_n();
  inline ::Protobuf::BigInt* release_n();
  inline void set_allocated_n(::Protobuf::BigInt* n);

  // required .Protobuf.BigInt y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline const ::Protobuf::BigInt& y() const;
  inline ::Protobuf::BigInt* mutable_y();
  inline ::Protobuf::BigInt* release_y();
  inline void set_allocated_y(::Protobuf::BigInt* y);

  // @@protoc_insertion_point(class_scope:Protobuf.GM_PK)
 private:
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Protobuf::BigInt* n_;
  ::Protobuf::BigInt* y_;
  friend void  protobuf_AddDesc_keys_2eproto();
  friend void protobuf_AssignDesc_keys_2eproto();
  friend void protobuf_ShutdownFile_keys_2eproto();

  void InitAsDefaultInstance();
  static GM_PK* default_instance_;
};
// -------------------------------------------------------------------

class PK_Status : public ::google::protobuf::Message {
 public:
  PK_Status();
  virtual ~PK_Status();

  PK_Status(const PK_Status& from);

  inline PK_Status& operator=(const PK_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PK_Status& default_instance();

  void Swap(PK_Status* other);

  // implements Message ----------------------------------------------

  PK_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PK_Status& from);
  void MergeFrom(const PK_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PK_Status_Key_Type Key_Type;
  static const Key_Type GM = PK_Status_Key_Type_GM;
  static const Key_Type PAILLIER = PK_Status_Key_Type_PAILLIER;
  static inline bool Key_Type_IsValid(int value) {
    return PK_Status_Key_Type_IsValid(value);
  }
  static const Key_Type Key_Type_MIN =
    PK_Status_Key_Type_Key_Type_MIN;
  static const Key_Type Key_Type_MAX =
    PK_Status_Key_Type_Key_Type_MAX;
  static const int Key_Type_ARRAYSIZE =
    PK_Status_Key_Type_Key_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Key_Type_descriptor() {
    return PK_Status_Key_Type_descriptor();
  }
  static inline const ::std::string& Key_Type_Name(Key_Type value) {
    return PK_Status_Key_Type_Name(value);
  }
  static inline bool Key_Type_Parse(const ::std::string& name,
      Key_Type* value) {
    return PK_Status_Key_Type_Parse(name, value);
  }

  typedef PK_Status_Key_Status Key_Status;
  static const Key_Status NEED_PK = PK_Status_Key_Status_NEED_PK;
  static const Key_Status NO_NEED_PK = PK_Status_Key_Status_NO_NEED_PK;
  static const Key_Status HAS_PK = PK_Status_Key_Status_HAS_PK;
  static inline bool Key_Status_IsValid(int value) {
    return PK_Status_Key_Status_IsValid(value);
  }
  static const Key_Status Key_Status_MIN =
    PK_Status_Key_Status_Key_Status_MIN;
  static const Key_Status Key_Status_MAX =
    PK_Status_Key_Status_Key_Status_MAX;
  static const int Key_Status_ARRAYSIZE =
    PK_Status_Key_Status_Key_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Key_Status_descriptor() {
    return PK_Status_Key_Status_descriptor();
  }
  static inline const ::std::string& Key_Status_Name(Key_Status value) {
    return PK_Status_Key_Status_Name(value);
  }
  static inline bool Key_Status_Parse(const ::std::string& name,
      Key_Status* value) {
    return PK_Status_Key_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Protobuf.PK_Status.Key_Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Protobuf::PK_Status_Key_Type type() const;
  inline void set_type(::Protobuf::PK_Status_Key_Type value);

  // required .Protobuf.PK_Status.Key_Status state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::Protobuf::PK_Status_Key_Status state() const;
  inline void set_state(::Protobuf::PK_Status_Key_Status value);

  // @@protoc_insertion_point(class_scope:Protobuf.PK_Status)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int state_;
  friend void  protobuf_AddDesc_keys_2eproto();
  friend void protobuf_AssignDesc_keys_2eproto();
  friend void protobuf_ShutdownFile_keys_2eproto();

  void InitAsDefaultInstance();
  static PK_Status* default_instance_;
};
// ===================================================================


// ===================================================================

// Paillier_PK

// required .Protobuf.BigInt N = 1;
inline bool Paillier_PK::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Paillier_PK::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Paillier_PK::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Paillier_PK::clear_n() {
  if (n_ != NULL) n_->::Protobuf::BigInt::Clear();
  clear_has_n();
}
inline const ::Protobuf::BigInt& Paillier_PK::n() const {
  // @@protoc_insertion_point(field_get:Protobuf.Paillier_PK.N)
  return n_ != NULL ? *n_ : *default_instance_->n_;
}
inline ::Protobuf::BigInt* Paillier_PK::mutable_n() {
  set_has_n();
  if (n_ == NULL) n_ = new ::Protobuf::BigInt;
  // @@protoc_insertion_point(field_mutable:Protobuf.Paillier_PK.N)
  return n_;
}
inline ::Protobuf::BigInt* Paillier_PK::release_n() {
  clear_has_n();
  ::Protobuf::BigInt* temp = n_;
  n_ = NULL;
  return temp;
}
inline void Paillier_PK::set_allocated_n(::Protobuf::BigInt* n) {
  delete n_;
  n_ = n;
  if (n) {
    set_has_n();
  } else {
    clear_has_n();
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.Paillier_PK.N)
}

// required .Protobuf.BigInt g = 2;
inline bool Paillier_PK::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Paillier_PK::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Paillier_PK::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Paillier_PK::clear_g() {
  if (g_ != NULL) g_->::Protobuf::BigInt::Clear();
  clear_has_g();
}
inline const ::Protobuf::BigInt& Paillier_PK::g() const {
  // @@protoc_insertion_point(field_get:Protobuf.Paillier_PK.g)
  return g_ != NULL ? *g_ : *default_instance_->g_;
}
inline ::Protobuf::BigInt* Paillier_PK::mutable_g() {
  set_has_g();
  if (g_ == NULL) g_ = new ::Protobuf::BigInt;
  // @@protoc_insertion_point(field_mutable:Protobuf.Paillier_PK.g)
  return g_;
}
inline ::Protobuf::BigInt* Paillier_PK::release_g() {
  clear_has_g();
  ::Protobuf::BigInt* temp = g_;
  g_ = NULL;
  return temp;
}
inline void Paillier_PK::set_allocated_g(::Protobuf::BigInt* g) {
  delete g_;
  g_ = g;
  if (g) {
    set_has_g();
  } else {
    clear_has_g();
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.Paillier_PK.g)
}

// -------------------------------------------------------------------

// GM_PK

// required .Protobuf.BigInt N = 1;
inline bool GM_PK::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_PK::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_PK::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_PK::clear_n() {
  if (n_ != NULL) n_->::Protobuf::BigInt::Clear();
  clear_has_n();
}
inline const ::Protobuf::BigInt& GM_PK::n() const {
  // @@protoc_insertion_point(field_get:Protobuf.GM_PK.N)
  return n_ != NULL ? *n_ : *default_instance_->n_;
}
inline ::Protobuf::BigInt* GM_PK::mutable_n() {
  set_has_n();
  if (n_ == NULL) n_ = new ::Protobuf::BigInt;
  // @@protoc_insertion_point(field_mutable:Protobuf.GM_PK.N)
  return n_;
}
inline ::Protobuf::BigInt* GM_PK::release_n() {
  clear_has_n();
  ::Protobuf::BigInt* temp = n_;
  n_ = NULL;
  return temp;
}
inline void GM_PK::set_allocated_n(::Protobuf::BigInt* n) {
  delete n_;
  n_ = n;
  if (n) {
    set_has_n();
  } else {
    clear_has_n();
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.GM_PK.N)
}

// required .Protobuf.BigInt y = 2;
inline bool GM_PK::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_PK::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_PK::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_PK::clear_y() {
  if (y_ != NULL) y_->::Protobuf::BigInt::Clear();
  clear_has_y();
}
inline const ::Protobuf::BigInt& GM_PK::y() const {
  // @@protoc_insertion_point(field_get:Protobuf.GM_PK.y)
  return y_ != NULL ? *y_ : *default_instance_->y_;
}
inline ::Protobuf::BigInt* GM_PK::mutable_y() {
  set_has_y();
  if (y_ == NULL) y_ = new ::Protobuf::BigInt;
  // @@protoc_insertion_point(field_mutable:Protobuf.GM_PK.y)
  return y_;
}
inline ::Protobuf::BigInt* GM_PK::release_y() {
  clear_has_y();
  ::Protobuf::BigInt* temp = y_;
  y_ = NULL;
  return temp;
}
inline void GM_PK::set_allocated_y(::Protobuf::BigInt* y) {
  delete y_;
  y_ = y;
  if (y) {
    set_has_y();
  } else {
    clear_has_y();
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.GM_PK.y)
}

// -------------------------------------------------------------------

// PK_Status

// required .Protobuf.PK_Status.Key_Type type = 1;
inline bool PK_Status::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PK_Status::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PK_Status::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PK_Status::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Protobuf::PK_Status_Key_Type PK_Status::type() const {
  // @@protoc_insertion_point(field_get:Protobuf.PK_Status.type)
  return static_cast< ::Protobuf::PK_Status_Key_Type >(type_);
}
inline void PK_Status::set_type(::Protobuf::PK_Status_Key_Type value) {
  assert(::Protobuf::PK_Status_Key_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.PK_Status.type)
}

// required .Protobuf.PK_Status.Key_Status state = 2;
inline bool PK_Status::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PK_Status::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PK_Status::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PK_Status::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::Protobuf::PK_Status_Key_Status PK_Status::state() const {
  // @@protoc_insertion_point(field_get:Protobuf.PK_Status.state)
  return static_cast< ::Protobuf::PK_Status_Key_Status >(state_);
}
inline void PK_Status::set_state(::Protobuf::PK_Status_Key_Status value) {
  assert(::Protobuf::PK_Status_Key_Status_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.PK_Status.state)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Protobuf::PK_Status_Key_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::PK_Status_Key_Type>() {
  return ::Protobuf::PK_Status_Key_Type_descriptor();
}
template <> struct is_proto_enum< ::Protobuf::PK_Status_Key_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::PK_Status_Key_Status>() {
  return ::Protobuf::PK_Status_Key_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_keys_2eproto__INCLUDED
