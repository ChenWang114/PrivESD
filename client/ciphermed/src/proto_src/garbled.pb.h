// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: garbled.proto

#ifndef PROTOBUF_garbled_2eproto__INCLUDED
#define PROTOBUF_garbled_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_garbled_2eproto();
void protobuf_AssignDesc_garbled_2eproto();
void protobuf_ShutdownFile_garbled_2eproto();

class block;
class GarbledTable;

// ===================================================================

class block : public ::google::protobuf::Message {
 public:
  block();
  virtual ~block();

  block(const block& from);

  inline block& operator=(const block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const block& default_instance();

  void Swap(block* other);

  // implements Message ----------------------------------------------

  block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const block& from);
  void MergeFrom(const block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes lsb = 1;
  inline bool has_lsb() const;
  inline void clear_lsb();
  static const int kLsbFieldNumber = 1;
  inline const ::std::string& lsb() const;
  inline void set_lsb(const ::std::string& value);
  inline void set_lsb(const char* value);
  inline void set_lsb(const void* value, size_t size);
  inline ::std::string* mutable_lsb();
  inline ::std::string* release_lsb();
  inline void set_allocated_lsb(::std::string* lsb);

  // required bytes msb = 2;
  inline bool has_msb() const;
  inline void clear_msb();
  static const int kMsbFieldNumber = 2;
  inline const ::std::string& msb() const;
  inline void set_msb(const ::std::string& value);
  inline void set_msb(const char* value);
  inline void set_msb(const void* value, size_t size);
  inline ::std::string* mutable_msb();
  inline ::std::string* release_msb();
  inline void set_allocated_msb(::std::string* msb);

  // @@protoc_insertion_point(class_scope:Protobuf.block)
 private:
  inline void set_has_lsb();
  inline void clear_has_lsb();
  inline void set_has_msb();
  inline void clear_has_msb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* lsb_;
  ::std::string* msb_;
  friend void  protobuf_AddDesc_garbled_2eproto();
  friend void protobuf_AssignDesc_garbled_2eproto();
  friend void protobuf_ShutdownFile_garbled_2eproto();

  void InitAsDefaultInstance();
  static block* default_instance_;
};
// -------------------------------------------------------------------

class GarbledTable : public ::google::protobuf::Message {
 public:
  GarbledTable();
  virtual ~GarbledTable();

  GarbledTable(const GarbledTable& from);

  inline GarbledTable& operator=(const GarbledTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GarbledTable& default_instance();

  void Swap(GarbledTable* other);

  // implements Message ----------------------------------------------

  GarbledTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GarbledTable& from);
  void MergeFrom(const GarbledTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data_stream = 1;
  inline bool has_data_stream() const;
  inline void clear_data_stream();
  static const int kDataStreamFieldNumber = 1;
  inline const ::std::string& data_stream() const;
  inline void set_data_stream(const ::std::string& value);
  inline void set_data_stream(const char* value);
  inline void set_data_stream(const void* value, size_t size);
  inline ::std::string* mutable_data_stream();
  inline ::std::string* release_data_stream();
  inline void set_allocated_data_stream(::std::string* data_stream);

  // @@protoc_insertion_point(class_scope:Protobuf.GarbledTable)
 private:
  inline void set_has_data_stream();
  inline void clear_has_data_stream();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_stream_;
  friend void  protobuf_AddDesc_garbled_2eproto();
  friend void protobuf_AssignDesc_garbled_2eproto();
  friend void protobuf_ShutdownFile_garbled_2eproto();

  void InitAsDefaultInstance();
  static GarbledTable* default_instance_;
};
// ===================================================================


// ===================================================================

// block

// required bytes lsb = 1;
inline bool block::has_lsb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void block::set_has_lsb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void block::clear_has_lsb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void block::clear_lsb() {
  if (lsb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lsb_->clear();
  }
  clear_has_lsb();
}
inline const ::std::string& block::lsb() const {
  // @@protoc_insertion_point(field_get:Protobuf.block.lsb)
  return *lsb_;
}
inline void block::set_lsb(const ::std::string& value) {
  set_has_lsb();
  if (lsb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lsb_ = new ::std::string;
  }
  lsb_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.block.lsb)
}
inline void block::set_lsb(const char* value) {
  set_has_lsb();
  if (lsb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lsb_ = new ::std::string;
  }
  lsb_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.block.lsb)
}
inline void block::set_lsb(const void* value, size_t size) {
  set_has_lsb();
  if (lsb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lsb_ = new ::std::string;
  }
  lsb_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.block.lsb)
}
inline ::std::string* block::mutable_lsb() {
  set_has_lsb();
  if (lsb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lsb_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.block.lsb)
  return lsb_;
}
inline ::std::string* block::release_lsb() {
  clear_has_lsb();
  if (lsb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lsb_;
    lsb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void block::set_allocated_lsb(::std::string* lsb) {
  if (lsb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lsb_;
  }
  if (lsb) {
    set_has_lsb();
    lsb_ = lsb;
  } else {
    clear_has_lsb();
    lsb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.block.lsb)
}

// required bytes msb = 2;
inline bool block::has_msb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void block::set_has_msb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void block::clear_has_msb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void block::clear_msb() {
  if (msb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msb_->clear();
  }
  clear_has_msb();
}
inline const ::std::string& block::msb() const {
  // @@protoc_insertion_point(field_get:Protobuf.block.msb)
  return *msb_;
}
inline void block::set_msb(const ::std::string& value) {
  set_has_msb();
  if (msb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msb_ = new ::std::string;
  }
  msb_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.block.msb)
}
inline void block::set_msb(const char* value) {
  set_has_msb();
  if (msb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msb_ = new ::std::string;
  }
  msb_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.block.msb)
}
inline void block::set_msb(const void* value, size_t size) {
  set_has_msb();
  if (msb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msb_ = new ::std::string;
  }
  msb_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.block.msb)
}
inline ::std::string* block::mutable_msb() {
  set_has_msb();
  if (msb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msb_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.block.msb)
  return msb_;
}
inline ::std::string* block::release_msb() {
  clear_has_msb();
  if (msb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msb_;
    msb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void block::set_allocated_msb(::std::string* msb) {
  if (msb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msb_;
  }
  if (msb) {
    set_has_msb();
    msb_ = msb;
  } else {
    clear_has_msb();
    msb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.block.msb)
}

// -------------------------------------------------------------------

// GarbledTable

// required bytes data_stream = 1;
inline bool GarbledTable::has_data_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GarbledTable::set_has_data_stream() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GarbledTable::clear_has_data_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GarbledTable::clear_data_stream() {
  if (data_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_stream_->clear();
  }
  clear_has_data_stream();
}
inline const ::std::string& GarbledTable::data_stream() const {
  // @@protoc_insertion_point(field_get:Protobuf.GarbledTable.data_stream)
  return *data_stream_;
}
inline void GarbledTable::set_data_stream(const ::std::string& value) {
  set_has_data_stream();
  if (data_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_stream_ = new ::std::string;
  }
  data_stream_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.GarbledTable.data_stream)
}
inline void GarbledTable::set_data_stream(const char* value) {
  set_has_data_stream();
  if (data_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_stream_ = new ::std::string;
  }
  data_stream_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.GarbledTable.data_stream)
}
inline void GarbledTable::set_data_stream(const void* value, size_t size) {
  set_has_data_stream();
  if (data_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_stream_ = new ::std::string;
  }
  data_stream_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.GarbledTable.data_stream)
}
inline ::std::string* GarbledTable::mutable_data_stream() {
  set_has_data_stream();
  if (data_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_stream_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.GarbledTable.data_stream)
  return data_stream_;
}
inline ::std::string* GarbledTable::release_data_stream() {
  clear_has_data_stream();
  if (data_stream_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_stream_;
    data_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GarbledTable::set_allocated_data_stream(::std::string* data_stream) {
  if (data_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_stream_;
  }
  if (data_stream) {
    set_has_data_stream();
    data_stream_ = data_stream;
  } else {
    clear_has_data_stream();
    data_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.GarbledTable.data_stream)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_garbled_2eproto__INCLUDED
