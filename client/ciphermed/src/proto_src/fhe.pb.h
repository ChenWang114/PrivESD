// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fhe.proto

#ifndef PROTOBUF_fhe_2eproto__INCLUDED
#define PROTOBUF_fhe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fhe_2eproto();
void protobuf_AssignDesc_fhe_2eproto();
void protobuf_ShutdownFile_fhe_2eproto();

class FHE_Context;
class FHE_PK;
class FHE_Ctxt;

// ===================================================================

class FHE_Context : public ::google::protobuf::Message {
 public:
  FHE_Context();
  virtual ~FHE_Context();

  FHE_Context(const FHE_Context& from);

  inline FHE_Context& operator=(const FHE_Context& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FHE_Context& default_instance();

  void Swap(FHE_Context* other);

  // implements Message ----------------------------------------------

  FHE_Context* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FHE_Context& from);
  void MergeFrom(const FHE_Context& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Protobuf.FHE_Context)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_fhe_2eproto();
  friend void protobuf_AssignDesc_fhe_2eproto();
  friend void protobuf_ShutdownFile_fhe_2eproto();

  void InitAsDefaultInstance();
  static FHE_Context* default_instance_;
};
// -------------------------------------------------------------------

class FHE_PK : public ::google::protobuf::Message {
 public:
  FHE_PK();
  virtual ~FHE_PK();

  FHE_PK(const FHE_PK& from);

  inline FHE_PK& operator=(const FHE_PK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FHE_PK& default_instance();

  void Swap(FHE_PK* other);

  // implements Message ----------------------------------------------

  FHE_PK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FHE_PK& from);
  void MergeFrom(const FHE_PK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Protobuf.FHE_PK)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_fhe_2eproto();
  friend void protobuf_AssignDesc_fhe_2eproto();
  friend void protobuf_ShutdownFile_fhe_2eproto();

  void InitAsDefaultInstance();
  static FHE_PK* default_instance_;
};
// -------------------------------------------------------------------

class FHE_Ctxt : public ::google::protobuf::Message {
 public:
  FHE_Ctxt();
  virtual ~FHE_Ctxt();

  FHE_Ctxt(const FHE_Ctxt& from);

  inline FHE_Ctxt& operator=(const FHE_Ctxt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FHE_Ctxt& default_instance();

  void Swap(FHE_Ctxt* other);

  // implements Message ----------------------------------------------

  FHE_Ctxt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FHE_Ctxt& from);
  void MergeFrom(const FHE_Ctxt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Protobuf.FHE_Ctxt)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_fhe_2eproto();
  friend void protobuf_AssignDesc_fhe_2eproto();
  friend void protobuf_ShutdownFile_fhe_2eproto();

  void InitAsDefaultInstance();
  static FHE_Ctxt* default_instance_;
};
// ===================================================================


// ===================================================================

// FHE_Context

// required string content = 1;
inline bool FHE_Context::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FHE_Context::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FHE_Context::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FHE_Context::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& FHE_Context::content() const {
  // @@protoc_insertion_point(field_get:Protobuf.FHE_Context.content)
  return *content_;
}
inline void FHE_Context::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.FHE_Context.content)
}
inline void FHE_Context::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.FHE_Context.content)
}
inline void FHE_Context::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.FHE_Context.content)
}
inline ::std::string* FHE_Context::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.FHE_Context.content)
  return content_;
}
inline ::std::string* FHE_Context::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FHE_Context::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.FHE_Context.content)
}

// -------------------------------------------------------------------

// FHE_PK

// required string content = 1;
inline bool FHE_PK::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FHE_PK::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FHE_PK::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FHE_PK::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& FHE_PK::content() const {
  // @@protoc_insertion_point(field_get:Protobuf.FHE_PK.content)
  return *content_;
}
inline void FHE_PK::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.FHE_PK.content)
}
inline void FHE_PK::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.FHE_PK.content)
}
inline void FHE_PK::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.FHE_PK.content)
}
inline ::std::string* FHE_PK::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.FHE_PK.content)
  return content_;
}
inline ::std::string* FHE_PK::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FHE_PK::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.FHE_PK.content)
}

// -------------------------------------------------------------------

// FHE_Ctxt

// required string content = 1;
inline bool FHE_Ctxt::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FHE_Ctxt::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FHE_Ctxt::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FHE_Ctxt::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& FHE_Ctxt::content() const {
  // @@protoc_insertion_point(field_get:Protobuf.FHE_Ctxt.content)
  return *content_;
}
inline void FHE_Ctxt::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Protobuf.FHE_Ctxt.content)
}
inline void FHE_Ctxt::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protobuf.FHE_Ctxt.content)
}
inline void FHE_Ctxt::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protobuf.FHE_Ctxt.content)
}
inline ::std::string* FHE_Ctxt::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.FHE_Ctxt.content)
  return content_;
}
inline ::std::string* FHE_Ctxt::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FHE_Ctxt::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.FHE_Ctxt.content)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fhe_2eproto__INCLUDED
