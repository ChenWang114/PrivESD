// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: garbled.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "garbled.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

namespace {

const ::google::protobuf::Descriptor* block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  block_reflection_ = NULL;
const ::google::protobuf::Descriptor* GarbledTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarbledTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_garbled_2eproto() {
  protobuf_AddDesc_garbled_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "garbled.proto");
  GOOGLE_CHECK(file != NULL);
  block_descriptor_ = file->message_type(0);
  static const int block_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(block, lsb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(block, msb_),
  };
  block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      block_descriptor_,
      block::default_instance_,
      block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(block));
  GarbledTable_descriptor_ = file->message_type(1);
  static const int GarbledTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbledTable, data_stream_),
  };
  GarbledTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarbledTable_descriptor_,
      GarbledTable::default_instance_,
      GarbledTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbledTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbledTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarbledTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_garbled_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    block_descriptor_, &block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarbledTable_descriptor_, &GarbledTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_garbled_2eproto() {
  delete block::default_instance_;
  delete block_reflection_;
  delete GarbledTable::default_instance_;
  delete GarbledTable_reflection_;
}

void protobuf_AddDesc_garbled_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgarbled.proto\022\010Protobuf\"!\n\005block\022\013\n\003ls"
    "b\030\001 \002(\014\022\013\n\003msb\030\002 \002(\014\"#\n\014GarbledTable\022\023\n\013"
    "data_stream\030\001 \002(\014", 97);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "garbled.proto", &protobuf_RegisterTypes);
  block::default_instance_ = new block();
  GarbledTable::default_instance_ = new GarbledTable();
  block::default_instance_->InitAsDefaultInstance();
  GarbledTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_garbled_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_garbled_2eproto {
  StaticDescriptorInitializer_garbled_2eproto() {
    protobuf_AddDesc_garbled_2eproto();
  }
} static_descriptor_initializer_garbled_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int block::kLsbFieldNumber;
const int block::kMsbFieldNumber;
#endif  // !_MSC_VER

block::block()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.block)
}

void block::InitAsDefaultInstance() {
}

block::block(const block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.block)
}

void block::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lsb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

block::~block() {
  // @@protoc_insertion_point(destructor:Protobuf.block)
  SharedDtor();
}

void block::SharedDtor() {
  if (lsb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lsb_;
  }
  if (msb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msb_;
  }
  if (this != default_instance_) {
  }
}

void block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return block_descriptor_;
}

const block& block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_garbled_2eproto();
  return *default_instance_;
}

block* block::default_instance_ = NULL;

block* block::New() const {
  return new block;
}

void block::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_lsb()) {
      if (lsb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lsb_->clear();
      }
    }
    if (has_msb()) {
      if (msb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msb_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes lsb = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lsb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msb;
        break;
      }

      // required bytes msb = 2;
      case 2: {
        if (tag == 18) {
         parse_msb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.block)
  return false;
#undef DO_
}

void block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.block)
  // required bytes lsb = 1;
  if (has_lsb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->lsb(), output);
  }

  // required bytes msb = 2;
  if (has_msb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.block)
}

::google::protobuf::uint8* block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.block)
  // required bytes lsb = 1;
  if (has_lsb()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->lsb(), target);
  }

  // required bytes msb = 2;
  if (has_msb()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.block)
  return target;
}

int block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes lsb = 1;
    if (has_lsb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lsb());
    }

    // required bytes msb = 2;
    if (has_msb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void block::MergeFrom(const block& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lsb()) {
      set_lsb(from.lsb());
    }
    if (from.has_msb()) {
      set_msb(from.msb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void block::CopyFrom(const block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void block::Swap(block* other) {
  if (other != this) {
    std::swap(lsb_, other->lsb_);
    std::swap(msb_, other->msb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = block_descriptor_;
  metadata.reflection = block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GarbledTable::kDataStreamFieldNumber;
#endif  // !_MSC_VER

GarbledTable::GarbledTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.GarbledTable)
}

void GarbledTable::InitAsDefaultInstance() {
}

GarbledTable::GarbledTable(const GarbledTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.GarbledTable)
}

void GarbledTable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarbledTable::~GarbledTable() {
  // @@protoc_insertion_point(destructor:Protobuf.GarbledTable)
  SharedDtor();
}

void GarbledTable::SharedDtor() {
  if (data_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_stream_;
  }
  if (this != default_instance_) {
  }
}

void GarbledTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarbledTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarbledTable_descriptor_;
}

const GarbledTable& GarbledTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_garbled_2eproto();
  return *default_instance_;
}

GarbledTable* GarbledTable::default_instance_ = NULL;

GarbledTable* GarbledTable::New() const {
  return new GarbledTable;
}

void GarbledTable::Clear() {
  if (has_data_stream()) {
    if (data_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_stream_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarbledTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.GarbledTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data_stream = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.GarbledTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.GarbledTable)
  return false;
#undef DO_
}

void GarbledTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.GarbledTable)
  // required bytes data_stream = 1;
  if (has_data_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data_stream(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.GarbledTable)
}

::google::protobuf::uint8* GarbledTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.GarbledTable)
  // required bytes data_stream = 1;
  if (has_data_stream()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data_stream(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.GarbledTable)
  return target;
}

int GarbledTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data_stream = 1;
    if (has_data_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_stream());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbledTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarbledTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarbledTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarbledTable::MergeFrom(const GarbledTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_stream()) {
      set_data_stream(from.data_stream());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarbledTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarbledTable::CopyFrom(const GarbledTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbledTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GarbledTable::Swap(GarbledTable* other) {
  if (other != this) {
    std::swap(data_stream_, other->data_stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarbledTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarbledTable_descriptor_;
  metadata.reflection = GarbledTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

// @@protoc_insertion_point(global_scope)
