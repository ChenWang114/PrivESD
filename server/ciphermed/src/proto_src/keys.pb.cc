// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

namespace {

const ::google::protobuf::Descriptor* Paillier_PK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Paillier_PK_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PK_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PK_Status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PK_Status_Key_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PK_Status_Key_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_keys_2eproto() {
  protobuf_AddDesc_keys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "keys.proto");
  GOOGLE_CHECK(file != NULL);
  Paillier_PK_descriptor_ = file->message_type(0);
  static const int Paillier_PK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paillier_PK, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paillier_PK, g_),
  };
  Paillier_PK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Paillier_PK_descriptor_,
      Paillier_PK::default_instance_,
      Paillier_PK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paillier_PK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paillier_PK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Paillier_PK));
  GM_PK_descriptor_ = file->message_type(1);
  static const int GM_PK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PK, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PK, y_),
  };
  GM_PK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PK_descriptor_,
      GM_PK::default_instance_,
      GM_PK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PK));
  PK_Status_descriptor_ = file->message_type(2);
  static const int PK_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK_Status, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK_Status, state_),
  };
  PK_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PK_Status_descriptor_,
      PK_Status::default_instance_,
      PK_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PK_Status));
  PK_Status_Key_Type_descriptor_ = PK_Status_descriptor_->enum_type(0);
  PK_Status_Key_Status_descriptor_ = PK_Status_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_keys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Paillier_PK_descriptor_, &Paillier_PK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PK_descriptor_, &GM_PK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PK_Status_descriptor_, &PK_Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_keys_2eproto() {
  delete Paillier_PK::default_instance_;
  delete Paillier_PK_reflection_;
  delete GM_PK::default_instance_;
  delete GM_PK_reflection_;
  delete PK_Status::default_instance_;
  delete PK_Status_reflection_;
}

void protobuf_AddDesc_keys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Protobuf::protobuf_AddDesc_bigint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nkeys.proto\022\010Protobuf\032\014bigint.proto\"G\n\013"
    "Paillier_PK\022\033\n\001N\030\001 \002(\0132\020.Protobuf.BigInt"
    "\022\033\n\001g\030\002 \002(\0132\020.Protobuf.BigInt\"A\n\005GM_PK\022\033"
    "\n\001N\030\001 \002(\0132\020.Protobuf.BigInt\022\033\n\001y\030\002 \002(\0132\020"
    ".Protobuf.BigInt\"\277\001\n\tPK_Status\022*\n\004type\030\001"
    " \002(\0162\034.Protobuf.PK_Status.Key_Type\022-\n\005st"
    "ate\030\002 \002(\0162\036.Protobuf.PK_Status.Key_Statu"
    "s\" \n\010Key_Type\022\006\n\002GM\020\000\022\014\n\010PAILLIER\020\001\"5\n\nK"
    "ey_Status\022\013\n\007NEED_PK\020\000\022\016\n\nNO_NEED_PK\020\001\022\n"
    "\n\006HAS_PK\020\002", 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "keys.proto", &protobuf_RegisterTypes);
  Paillier_PK::default_instance_ = new Paillier_PK();
  GM_PK::default_instance_ = new GM_PK();
  PK_Status::default_instance_ = new PK_Status();
  Paillier_PK::default_instance_->InitAsDefaultInstance();
  GM_PK::default_instance_->InitAsDefaultInstance();
  PK_Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_keys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_keys_2eproto {
  StaticDescriptorInitializer_keys_2eproto() {
    protobuf_AddDesc_keys_2eproto();
  }
} static_descriptor_initializer_keys_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Paillier_PK::kNFieldNumber;
const int Paillier_PK::kGFieldNumber;
#endif  // !_MSC_VER

Paillier_PK::Paillier_PK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.Paillier_PK)
}

void Paillier_PK::InitAsDefaultInstance() {
  n_ = const_cast< ::Protobuf::BigInt*>(&::Protobuf::BigInt::default_instance());
  g_ = const_cast< ::Protobuf::BigInt*>(&::Protobuf::BigInt::default_instance());
}

Paillier_PK::Paillier_PK(const Paillier_PK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.Paillier_PK)
}

void Paillier_PK::SharedCtor() {
  _cached_size_ = 0;
  n_ = NULL;
  g_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Paillier_PK::~Paillier_PK() {
  // @@protoc_insertion_point(destructor:Protobuf.Paillier_PK)
  SharedDtor();
}

void Paillier_PK::SharedDtor() {
  if (this != default_instance_) {
    delete n_;
    delete g_;
  }
}

void Paillier_PK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Paillier_PK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Paillier_PK_descriptor_;
}

const Paillier_PK& Paillier_PK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keys_2eproto();
  return *default_instance_;
}

Paillier_PK* Paillier_PK::default_instance_ = NULL;

Paillier_PK* Paillier_PK::New() const {
  return new Paillier_PK;
}

void Paillier_PK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_n()) {
      if (n_ != NULL) n_->::Protobuf::BigInt::Clear();
    }
    if (has_g()) {
      if (g_ != NULL) g_->::Protobuf::BigInt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Paillier_PK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.Paillier_PK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protobuf.BigInt N = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_g;
        break;
      }

      // required .Protobuf.BigInt g = 2;
      case 2: {
        if (tag == 18) {
         parse_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.Paillier_PK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.Paillier_PK)
  return false;
#undef DO_
}

void Paillier_PK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.Paillier_PK)
  // required .Protobuf.BigInt N = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->n(), output);
  }

  // required .Protobuf.BigInt g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->g(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.Paillier_PK)
}

::google::protobuf::uint8* Paillier_PK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.Paillier_PK)
  // required .Protobuf.BigInt N = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->n(), target);
  }

  // required .Protobuf.BigInt g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->g(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.Paillier_PK)
  return target;
}

int Paillier_PK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Protobuf.BigInt N = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n());
    }

    // required .Protobuf.BigInt g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->g());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Paillier_PK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Paillier_PK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Paillier_PK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Paillier_PK::MergeFrom(const Paillier_PK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      mutable_n()->::Protobuf::BigInt::MergeFrom(from.n());
    }
    if (from.has_g()) {
      mutable_g()->::Protobuf::BigInt::MergeFrom(from.g());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Paillier_PK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Paillier_PK::CopyFrom(const Paillier_PK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paillier_PK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_n()) {
    if (!this->n().IsInitialized()) return false;
  }
  if (has_g()) {
    if (!this->g().IsInitialized()) return false;
  }
  return true;
}

void Paillier_PK::Swap(Paillier_PK* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(g_, other->g_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Paillier_PK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Paillier_PK_descriptor_;
  metadata.reflection = Paillier_PK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PK::kNFieldNumber;
const int GM_PK::kYFieldNumber;
#endif  // !_MSC_VER

GM_PK::GM_PK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.GM_PK)
}

void GM_PK::InitAsDefaultInstance() {
  n_ = const_cast< ::Protobuf::BigInt*>(&::Protobuf::BigInt::default_instance());
  y_ = const_cast< ::Protobuf::BigInt*>(&::Protobuf::BigInt::default_instance());
}

GM_PK::GM_PK(const GM_PK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.GM_PK)
}

void GM_PK::SharedCtor() {
  _cached_size_ = 0;
  n_ = NULL;
  y_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PK::~GM_PK() {
  // @@protoc_insertion_point(destructor:Protobuf.GM_PK)
  SharedDtor();
}

void GM_PK::SharedDtor() {
  if (this != default_instance_) {
    delete n_;
    delete y_;
  }
}

void GM_PK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PK_descriptor_;
}

const GM_PK& GM_PK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keys_2eproto();
  return *default_instance_;
}

GM_PK* GM_PK::default_instance_ = NULL;

GM_PK* GM_PK::New() const {
  return new GM_PK;
}

void GM_PK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_n()) {
      if (n_ != NULL) n_->::Protobuf::BigInt::Clear();
    }
    if (has_y()) {
      if (y_ != NULL) y_->::Protobuf::BigInt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.GM_PK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protobuf.BigInt N = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // required .Protobuf.BigInt y = 2;
      case 2: {
        if (tag == 18) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.GM_PK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.GM_PK)
  return false;
#undef DO_
}

void GM_PK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.GM_PK)
  // required .Protobuf.BigInt N = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->n(), output);
  }

  // required .Protobuf.BigInt y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.GM_PK)
}

::google::protobuf::uint8* GM_PK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.GM_PK)
  // required .Protobuf.BigInt N = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->n(), target);
  }

  // required .Protobuf.BigInt y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.GM_PK)
  return target;
}

int GM_PK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Protobuf.BigInt N = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n());
    }

    // required .Protobuf.BigInt y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PK::MergeFrom(const GM_PK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      mutable_n()->::Protobuf::BigInt::MergeFrom(from.n());
    }
    if (from.has_y()) {
      mutable_y()->::Protobuf::BigInt::MergeFrom(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PK::CopyFrom(const GM_PK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_n()) {
    if (!this->n().IsInitialized()) return false;
  }
  if (has_y()) {
    if (!this->y().IsInitialized()) return false;
  }
  return true;
}

void GM_PK::Swap(GM_PK* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PK_descriptor_;
  metadata.reflection = GM_PK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PK_Status_Key_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PK_Status_Key_Type_descriptor_;
}
bool PK_Status_Key_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PK_Status_Key_Type PK_Status::GM;
const PK_Status_Key_Type PK_Status::PAILLIER;
const PK_Status_Key_Type PK_Status::Key_Type_MIN;
const PK_Status_Key_Type PK_Status::Key_Type_MAX;
const int PK_Status::Key_Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PK_Status_Key_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PK_Status_Key_Status_descriptor_;
}
bool PK_Status_Key_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PK_Status_Key_Status PK_Status::NEED_PK;
const PK_Status_Key_Status PK_Status::NO_NEED_PK;
const PK_Status_Key_Status PK_Status::HAS_PK;
const PK_Status_Key_Status PK_Status::Key_Status_MIN;
const PK_Status_Key_Status PK_Status::Key_Status_MAX;
const int PK_Status::Key_Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PK_Status::kTypeFieldNumber;
const int PK_Status::kStateFieldNumber;
#endif  // !_MSC_VER

PK_Status::PK_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.PK_Status)
}

void PK_Status::InitAsDefaultInstance() {
}

PK_Status::PK_Status(const PK_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.PK_Status)
}

void PK_Status::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PK_Status::~PK_Status() {
  // @@protoc_insertion_point(destructor:Protobuf.PK_Status)
  SharedDtor();
}

void PK_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PK_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PK_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PK_Status_descriptor_;
}

const PK_Status& PK_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keys_2eproto();
  return *default_instance_;
}

PK_Status* PK_Status::default_instance_ = NULL;

PK_Status* PK_Status::New() const {
  return new PK_Status;
}

void PK_Status::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PK_Status*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PK_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.PK_Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protobuf.PK_Status.Key_Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protobuf::PK_Status_Key_Type_IsValid(value)) {
            set_type(static_cast< ::Protobuf::PK_Status_Key_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .Protobuf.PK_Status.Key_Status state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protobuf::PK_Status_Key_Status_IsValid(value)) {
            set_state(static_cast< ::Protobuf::PK_Status_Key_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.PK_Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.PK_Status)
  return false;
#undef DO_
}

void PK_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.PK_Status)
  // required .Protobuf.PK_Status.Key_Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Protobuf.PK_Status.Key_Status state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.PK_Status)
}

::google::protobuf::uint8* PK_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.PK_Status)
  // required .Protobuf.PK_Status.Key_Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Protobuf.PK_Status.Key_Status state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.PK_Status)
  return target;
}

int PK_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Protobuf.PK_Status.Key_Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Protobuf.PK_Status.Key_Status state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PK_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PK_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PK_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PK_Status::MergeFrom(const PK_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PK_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_Status::CopyFrom(const PK_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PK_Status::Swap(PK_Status* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PK_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PK_Status_descriptor_;
  metadata.reflection = PK_Status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

// @@protoc_insertion_point(global_scope)
